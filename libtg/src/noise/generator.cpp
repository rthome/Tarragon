#include "noise/generator.h"

#include <array>

#include <glm/vec3.hpp>
#include <glm/geometric.hpp>
#include <glm/gtx/component_wise.hpp>

namespace tarragon::noise
{
    namespace
    {
        constexpr glm::ivec3 NoiseGen{ 1619, 31337, 6971 };
        constexpr int32_t SeedNoiseGen = 1013;
        constexpr int32_t ShiftNoiseGen = 8;

        constexpr std::array<glm::dvec3, 256> VectorTable
        {
            glm::dvec3 {-0.763874, -0.596439, -0.246489},
            glm::dvec3 {0.396055, 0.904518, -0.158073},
            glm::dvec3 {-0.499004, -0.8665, -0.0131631},
            glm::dvec3 {0.468724, -0.824756, 0.316346},
            glm::dvec3 {0.829598, 0.43195, 0.353816},
            glm::dvec3 {-0.454473, 0.629497, -0.630228},
            glm::dvec3 {-0.162349, -0.869962, -0.465628},
            glm::dvec3 {0.932805, 0.253451, 0.256198},
            glm::dvec3 {-0.345419, 0.927299, -0.144227},
            glm::dvec3 {-0.715026, -0.293698, -0.634413},
            glm::dvec3 {-0.245997, 0.717467, -0.651711},
            glm::dvec3 {-0.967409, -0.250435, -0.037451},
            glm::dvec3 {0.901729, 0.397108, -0.170852},
            glm::dvec3 {0.892657, -0.0720622, -0.444938},
            glm::dvec3 {0.0260084, -0.0361701, 0.999007},
            glm::dvec3 {0.949107, -0.19486, 0.247439},
            glm::dvec3 {0.471803, -0.807064, -0.355036},
            glm::dvec3 {0.879737, 0.141845, 0.453809},
            glm::dvec3 {0.570747, 0.696415, 0.435033},
            glm::dvec3 {-0.141751, -0.988233, -0.0574584},
            glm::dvec3 {-0.58219, -0.0303005, 0.812488},
            glm::dvec3 {-0.60922, 0.239482, -0.755975},
            glm::dvec3 {0.299394, -0.197066, -0.933557},
            glm::dvec3 {-0.851615, -0.220702, -0.47544},
            glm::dvec3 {0.848886, 0.341829, -0.403169},
            glm::dvec3 {-0.156129, -0.687241, 0.709453},
            glm::dvec3 {-0.665651, 0.626724, 0.405124},
            glm::dvec3 {0.595914, -0.674582, 0.43569},
            glm::dvec3 {0.171025, -0.509292, 0.843428},
            glm::dvec3 {0.78605, 0.536414, -0.307222},
            glm::dvec3 {0.18905, -0.791613, 0.581042},
            glm::dvec3 {-0.294916, 0.844994, 0.446105},
            glm::dvec3 {0.342031, -0.58736, -0.7335},
            glm::dvec3 {0.57155, 0.7869, 0.232635},
            glm::dvec3 {0.885026, -0.408223, 0.223791},
            glm::dvec3 {-0.789518, 0.571645, 0.223347},
            glm::dvec3 {0.774571, 0.31566, 0.548087},
            glm::dvec3 {-0.79695, -0.0433603, -0.602487},
            glm::dvec3 {-0.142425, -0.473249, -0.869339},
            glm::dvec3 {-0.0698838, 0.170442, 0.982886},
            glm::dvec3 {0.687815, -0.484748, 0.540306},
            glm::dvec3 {0.543703, -0.534446, -0.647112},
            glm::dvec3 {0.97186, 0.184391, -0.146588},
            glm::dvec3 {0.707084, 0.485713, -0.513921},
            glm::dvec3 {0.942302, 0.331945, 0.043348},
            glm::dvec3 {0.499084, 0.599922, 0.625307},
            glm::dvec3 {-0.289203, 0.211107, 0.9337},
            glm::dvec3 {0.412433, -0.71667, -0.56239},
            glm::dvec3 {0.87721, -0.082816, 0.47291},
            glm::dvec3 {-0.420685, -0.214278, 0.881538},
            glm::dvec3 {0.752558, -0.0391579, 0.657361},
            glm::dvec3 {0.0765725, -0.996789, 0.0234082},
            glm::dvec3 {-0.544312, -0.309435, -0.779727},
            glm::dvec3 {-0.455358, -0.415572, 0.787368},
            glm::dvec3 {-0.874586, 0.483746, 0.0330131},
            glm::dvec3 {0.245172, -0.0838623, 0.965846},
            glm::dvec3 {0.382293, -0.432813, 0.81641},
            glm::dvec3 {-0.287735, -0.905514, 0.311853},
            glm::dvec3 {-0.667704, 0.704955, -0.239186},
            glm::dvec3 {0.717885, -0.464002, -0.518983},
            glm::dvec3 {0.976342, -0.214895, 0.0240053},
            glm::dvec3 {-0.0733096, -0.921136, 0.382276},
            glm::dvec3 {-0.986284, 0.151224, -0.0661379},
            glm::dvec3 {-0.899319, -0.429671, 0.0812908},
            glm::dvec3 {0.652102, -0.724625, 0.222893},
            glm::dvec3 {0.203761, 0.458023, -0.865272},
            glm::dvec3 {-0.030396, 0.698724, -0.714745},
            glm::dvec3 {-0.460232, 0.839138, 0.289887},
            glm::dvec3 {-0.0898602, 0.837894, 0.538386},
            glm::dvec3 {-0.731595, 0.0793784, 0.677102},
            glm::dvec3 {-0.447236, -0.788397, 0.422386},
            glm::dvec3 {0.186481, 0.645855, -0.740335},
            glm::dvec3 {-0.259006, 0.935463, 0.240467},
            glm::dvec3 {0.445839, 0.819655, -0.359712},
            glm::dvec3 {0.349962, 0.755022, -0.554499},
            glm::dvec3 {-0.997078, -0.0359577, 0.0673977},
            glm::dvec3 {-0.431163, -0.147516, -0.890133},
            glm::dvec3 {0.299648, -0.63914, 0.708316},
            glm::dvec3 {0.397043, 0.566526, -0.722084},
            glm::dvec3 {-0.502489, 0.438308, -0.745246},
            glm::dvec3 {0.0687235, 0.354097, 0.93268},
            glm::dvec3 {-0.0476651, -0.462597, 0.885286},
            glm::dvec3 {-0.221934, 0.900739, -0.373383},
            glm::dvec3 {-0.956107, -0.225676, 0.186893},
            glm::dvec3 {-0.187627, 0.391487, -0.900852},
            glm::dvec3 {-0.224209, -0.315405, 0.92209},
            glm::dvec3 {-0.730807, -0.537068, 0.421283},
            glm::dvec3 {-0.0353135, -0.816748, 0.575913},
            glm::dvec3 {-0.941391, 0.176991, -0.287153},
            glm::dvec3 {-0.154174, 0.390458, 0.90762},
            glm::dvec3 {-0.283847, 0.533842, 0.796519},
            glm::dvec3 {-0.482737, -0.850448, 0.209052},
            glm::dvec3 {-0.649175, 0.477748, 0.591886},
            glm::dvec3 {0.885373, -0.405387, -0.227543},
            glm::dvec3 {-0.147261, 0.181623, -0.972279},
            glm::dvec3 {0.0959236, -0.115847, -0.988624},
            glm::dvec3 {-0.89724, -0.191348, 0.397928},
            glm::dvec3 {0.903553, -0.428461, -0.00350461},
            glm::dvec3 {0.849072, -0.295807, -0.437693},
            glm::dvec3 {0.65551, 0.741754, -0.141804},
            glm::dvec3 {0.61598, -0.178669, 0.767232},
            glm::dvec3 {0.0112967, 0.932256, -0.361623},
            glm::dvec3 {-0.793031, 0.258012, 0.551845},
            glm::dvec3 {0.421933, 0.454311, 0.784585},
            glm::dvec3 {-0.319993, 0.0401618, -0.946568},
            glm::dvec3 {-0.81571, 0.551307, -0.175151},
            glm::dvec3 {-0.377644, 0.00322313, 0.925945},
            glm::dvec3 {0.129759, -0.666581, -0.734052},
            glm::dvec3 {0.601901, -0.654237, -0.457919},
            glm::dvec3 {-0.927463, -0.0343576, -0.372334},
            glm::dvec3 {-0.438663, -0.868301, -0.231578},
            glm::dvec3 {-0.648845, -0.749138, -0.133387},
            glm::dvec3 {0.507393, -0.588294, 0.629653},
            glm::dvec3 {0.726958, 0.623665, 0.287358},
            glm::dvec3 {0.411159, 0.367614, -0.834151},
            glm::dvec3 {0.806333, 0.585117, -0.0864016},
            glm::dvec3 {0.263935, -0.880876, 0.392932},
            glm::dvec3 {0.421546, -0.201336, 0.884174},
            glm::dvec3 {-0.683198, -0.569557, -0.456996},
            glm::dvec3 {-0.117116, -0.0406654, -0.992285},
            glm::dvec3 {-0.643679, -0.109196, -0.757465},
            glm::dvec3 {-0.561559, -0.62989, 0.536554},
            glm::dvec3 {0.0628422, 0.104677, -0.992519},
            glm::dvec3 {0.480759, -0.2867, -0.828658},
            glm::dvec3 {-0.228559, -0.228965, -0.946222},
            glm::dvec3 {-0.10194, -0.65706, -0.746914},
            glm::dvec3 {0.0689193, -0.678236, 0.731605},
            glm::dvec3 {0.401019, -0.754026, 0.52022},
            glm::dvec3 {-0.742141, 0.547083, -0.387203},
            glm::dvec3 {-0.00210603, -0.796417, -0.604745},
            glm::dvec3 {0.296725, -0.409909, -0.862513},
            glm::dvec3 {-0.260932, -0.798201, 0.542945},
            glm::dvec3 {-0.641628, 0.742379, 0.192838},
            glm::dvec3 {-0.186009, -0.101514, 0.97729},
            glm::dvec3 {0.106711, -0.962067, 0.251079},
            glm::dvec3 {-0.743499, 0.30988, -0.592607},
            glm::dvec3 {-0.795853, -0.605066, -0.0226607},
            glm::dvec3 {-0.828661, -0.419471, -0.370628},
            glm::dvec3 {0.0847218, -0.489815, -0.8677},
            glm::dvec3 {-0.381405, 0.788019, -0.483276},
            glm::dvec3 {0.282042, -0.953394, 0.107205},
            glm::dvec3 {0.530774, 0.847413, 0.0130696},
            glm::dvec3 {0.0515397, 0.922524, 0.382484},
            glm::dvec3 {-0.631467, -0.709046, 0.313852},
            glm::dvec3 {0.688248, 0.517273, 0.508668},
            glm::dvec3 {0.646689, -0.333782, -0.685845},
            glm::dvec3 {-0.932528, -0.247532, -0.262906},
            glm::dvec3 {0.630609, 0.68757, -0.359973},
            glm::dvec3 {0.577805, -0.394189, 0.714673},
            glm::dvec3 {-0.887833, -0.437301, -0.14325},
            glm::dvec3 {0.690982, 0.174003, 0.701617},
            glm::dvec3 {-0.866701, 0.0118182, 0.498689},
            glm::dvec3 {-0.482876, 0.727143, 0.487949},
            glm::dvec3 {-0.577567, 0.682593, -0.447752},
            glm::dvec3 {0.373768, 0.0982991, 0.922299},
            glm::dvec3 {0.170744, 0.964243, -0.202687},
            glm::dvec3 {0.993654, -0.035791, -0.106632},
            glm::dvec3 {0.587065, 0.4143, -0.695493},
            glm::dvec3 {-0.396509, 0.26509, -0.878924},
            glm::dvec3 {-0.0866853, 0.83553, -0.542563},
            glm::dvec3 {0.923193, 0.133398, -0.360443},
            glm::dvec3 {0.00379108, -0.258618, 0.965972},
            glm::dvec3 {0.239144, 0.245154, -0.939526},
            glm::dvec3 {0.758731, -0.555871, 0.33961},
            glm::dvec3 {0.295355, 0.309513, 0.903862},
            glm::dvec3 {0.0531222, -0.91003, -0.411124},
            glm::dvec3 {0.270452, 0.0229439, -0.96246},
            glm::dvec3 {0.563634, 0.0324352, 0.825387},
            glm::dvec3 {0.156326, 0.147392, 0.976646},
            glm::dvec3 {-0.0410141, 0.981824, 0.185309},
            glm::dvec3 {-0.385562, -0.576343, -0.720535},
            glm::dvec3 {0.388281, 0.904441, 0.176702},
            glm::dvec3 {0.945561, -0.192859, -0.262146},
            glm::dvec3 {0.844504, 0.520193, 0.127325},
            glm::dvec3 {0.0330893, 0.999121, -0.0257505},
            glm::dvec3 {-0.592616, -0.482475, -0.644999},
            glm::dvec3 {0.539471, 0.631024, -0.557476},
            glm::dvec3 {0.655851, -0.027319, -0.754396},
            glm::dvec3 {0.274465, 0.887659, 0.369772},
            glm::dvec3 {-0.123419, 0.975177, -0.183842},
            glm::dvec3 {-0.223429, 0.708045, 0.66989},
            glm::dvec3 {-0.908654, 0.196302, 0.368528},
            glm::dvec3 {-0.95759, -0.00863708, 0.288005},
            glm::dvec3 {0.960535, 0.030592, 0.276472},
            glm::dvec3 {-0.413146, 0.907537, 0.0754161},
            glm::dvec3 {-0.847992, 0.350849, -0.397259},
            glm::dvec3 {0.614736, 0.395841, 0.68221},
            glm::dvec3 {-0.503504, -0.666128, -0.550234},
            glm::dvec3 {-0.268833, -0.738524, -0.618314},
            glm::dvec3 {0.792737, -0.60001, -0.107502},
            glm::dvec3 {-0.637582, 0.508144, -0.579032},
            glm::dvec3 {0.750105, 0.282165, -0.598101},
            glm::dvec3 {-0.351199, -0.392294, -0.850155},
            glm::dvec3 {0.250126, -0.960993, -0.118025},
            glm::dvec3 {-0.732341, 0.680909, -0.0063274},
            glm::dvec3 {-0.760674, -0.141009, 0.633634},
            glm::dvec3 {0.222823, -0.304012, 0.926243},
            glm::dvec3 {0.209178, 0.505671, 0.836984},
            glm::dvec3 {0.757914, -0.56629, -0.323857},
            glm::dvec3 {-0.782926, -0.339196, 0.52151},
            glm::dvec3 {-0.462952, 0.585565, 0.665424},
            glm::dvec3 {0.61879, 0.194119, -0.761194},
            glm::dvec3 {0.741388, -0.276743, 0.611357},
            glm::dvec3 {0.707571, 0.702621, 0.0752872},
            glm::dvec3 {0.156562, 0.819977, 0.550569},
            glm::dvec3 {-0.793606, 0.440216, 0.42},
            glm::dvec3 {0.234547, 0.885309, -0.401517},
            glm::dvec3 {0.132598, 0.80115, -0.58359},
            glm::dvec3 {-0.377899, -0.639179, 0.669808},
            glm::dvec3 {-0.865993, -0.396465, 0.304748},
            glm::dvec3 {-0.624815, -0.44283, 0.643046},
            glm::dvec3 {-0.485705, 0.825614, -0.287146},
            glm::dvec3 {-0.971788, 0.175535, 0.157529},
            glm::dvec3 {-0.456027, 0.392629, 0.798675},
            glm::dvec3 {-0.0104443, 0.521623, -0.853112},
            glm::dvec3 {-0.660575, -0.74519, 0.091282},
            glm::dvec3 {-0.0157698, -0.307475, -0.951425},
            glm::dvec3 {-0.603467, -0.250192, 0.757121},
            glm::dvec3 {0.506876, 0.25006, 0.824952},
            glm::dvec3 {0.255404, 0.966794, 0.00884498},
            glm::dvec3 {0.466764, -0.874228, -0.133625},
            glm::dvec3 {0.475077, -0.0682351, -0.877295},
            glm::dvec3 {-0.224967, -0.938972, -0.260233},
            glm::dvec3 {-0.377929, -0.814757, -0.439705},
            glm::dvec3 {-0.305847, 0.542333, -0.782517},
            glm::dvec3 {0.26658, -0.902905, -0.337191},
            glm::dvec3 {0.0275773, 0.322158, -0.946284},
            glm::dvec3 {0.0185422, 0.716349, 0.697496},
            glm::dvec3 {-0.20483, 0.978416, 0.0273371},
            glm::dvec3 {-0.898276, 0.373969, 0.230752},
            glm::dvec3 {-0.00909378, 0.546594, 0.837349},
            glm::dvec3 {0.6602, -0.751089, 0.000959236},
            glm::dvec3 {0.855301, -0.303056, 0.420259},
            glm::dvec3 {0.797138, 0.0623013, -0.600574},
            glm::dvec3 {0.48947, -0.866813, 0.0951509},
            glm::dvec3 {0.251142, 0.674531, 0.694216},
            glm::dvec3 {-0.578422, -0.737373, -0.348867},
            glm::dvec3 {-0.254689, -0.514807, 0.818601},
            glm::dvec3 {0.374972, 0.761612, 0.528529},
            glm::dvec3 {0.640303, -0.734271, -0.225517},
            glm::dvec3 {-0.638076, 0.285527, 0.715075},
            glm::dvec3 {0.772956, -0.15984, -0.613995},
            glm::dvec3 {0.798217, -0.590628, 0.118356},
            glm::dvec3 {-0.986276, -0.0578337, -0.154644},
            glm::dvec3 {-0.312988, -0.94549, 0.0899272},
            glm::dvec3 {-0.497338, 0.178325, 0.849032},
            glm::dvec3 {-0.101136, -0.981014, 0.165477},
            glm::dvec3 {-0.521688, 0.0553434, -0.851339},
            glm::dvec3 {-0.786182, -0.583814, 0.202678},
            glm::dvec3 {-0.565191, 0.821858, -0.0714658},
            glm::dvec3 {0.437895, 0.152598, -0.885981},
            glm::dvec3 {-0.92394, 0.353436, -0.14635},
            glm::dvec3 {0.212189, -0.815162, -0.538969},
            glm::dvec3 {-0.859262, 0.143405, -0.491024},
            glm::dvec3 {0.991353, 0.112814, 0.0670273},
            glm::dvec3 {0.0337884, -0.979891, -0.196654}
        };

        template <typename T>
        constexpr T scurve3(T a)
        {
            return a * a * (T{3} - T{2} * a);
        }

        template <typename T>
        constexpr T scurve5(T a)
        {
            T a3 = a * a * a;
            T a4 = a3 * a;
            T a5 = a4 * a;
            return (T{6} * a5) - (T{15} * a4) + (T{10} * a3);
        }
    }

    double gradient_coherent_noise_3d(glm::dvec3 const& pos, int32_t seed, NoiseQuality quality)
    {
        glm::ivec3 pos0 = glm::ivec3{ pos } - glm::step(0, glm::ivec3{ pos });
        glm::ivec3 pos1 = pos0 + 1;

        glm::dvec3 pos_diff = pos - glm::dvec3{ pos0 };
        glm::dvec3 spos{};
        switch (quality)
        {
            case NoiseQuality::Fast:
                spos = pos_diff;
                break;
            case NoiseQuality::Standard:
                spos = scurve3(pos_diff);
                break;
            case NoiseQuality::Best:
                spos = scurve5(pos_diff);
                break;
        }

        double ix0, ix1, iy0, iy1;
        ix0 = glm::mix(
            gradient_noise_3d(pos, glm::dvec3{ pos0.x, pos0.y, pos0.z }, seed),
            gradient_noise_3d(pos, glm::dvec3{ pos1.x, pos0.y, pos0.z }, seed),
            spos.x);
        ix1 = glm::mix(
            gradient_noise_3d(pos, glm::dvec3{ pos0.x, pos1.y, pos0.z }, seed),
            gradient_noise_3d(pos, glm::dvec3{ pos1.x, pos1.y, pos0.z }, seed),
            spos.x);
        iy0 = glm::mix(ix0, ix1, spos.y);
        ix0 = glm::mix(
            gradient_noise_3d(pos, glm::dvec3{ pos0.x, pos0.y, pos1.z }, seed),
            gradient_noise_3d(pos, glm::dvec3{ pos1.x, pos0.y, pos1.z }, seed),
            spos.x);
        ix1 = glm::mix(
            gradient_noise_3d(pos, glm::dvec3{ pos0.x, pos1.y, pos1.z }, seed),
            gradient_noise_3d(pos, glm::dvec3{ pos1.x, pos1.y, pos1.z }, seed),
            spos.x);
        iy1 = glm::mix(ix0, ix1, spos.y);
        return glm::mix(iy0, iy1, spos.z);
    }

    double gradient_noise_3d(glm::dvec3 const& fpos, glm::ivec3 const& ipos, int32_t seed)
    {
        int vector_index = (glm::compAdd(NoiseGen * ipos) + (SeedNoiseGen * seed)) & 0xffffffff;
        vector_index ^= (vector_index >> ShiftNoiseGen);
        vector_index &= 0xff;

        glm::dvec3 vgrad = VectorTable[vector_index];
        glm::dvec3 vpoint = fpos - glm::dvec3{ ipos };

        return glm::dot(vgrad, vpoint) * 2.12;
    }
    
    double value_coherent_noise_3d(glm::dvec3 const& pos, int32_t seed, NoiseQuality quality)
    {
        glm::ivec3 pos0 = glm::ivec3{ pos } - glm::step(0, glm::ivec3{ pos });
        glm::ivec3 pos1 = pos0 + 1;

        glm::dvec3 pos_diff = pos - glm::dvec3{ pos0 };
        glm::dvec3 spos{};
        switch (quality)
        {
            case NoiseQuality::Fast:
                spos = pos_diff;
                break;
            case NoiseQuality::Standard:
                spos = scurve3(pos_diff);
                break;
            case NoiseQuality::Best:
                spos = scurve5(pos_diff);
                break;
        }

        double ix0, ix1, iy0, iy1;
        ix0 = glm::mix(
            value_noise_3d(glm::ivec3{ pos0.x, pos0.y, pos0.z }, seed),
            value_noise_3d(glm::ivec3{ pos1.x, pos0.y, pos0.z }, seed),
            spos.x);
        ix1 = glm::mix(
            value_noise_3d(glm::ivec3{ pos0.x, pos1.y, pos0.z }, seed),
            value_noise_3d(glm::ivec3{ pos1.x, pos1.y, pos0.z }, seed),
            spos.x);
        iy0 = glm::mix(ix0, ix1, spos.y);
        ix0 = glm::mix(
            value_noise_3d(glm::ivec3{ pos0.x, pos0.y, pos1.z }, seed),
            value_noise_3d(glm::ivec3{ pos1.x, pos0.y, pos1.z }, seed),
            spos.x);
        ix1 = glm::mix(
            value_noise_3d(glm::ivec3{ pos0.x, pos1.y, pos1.z }, seed),
            value_noise_3d(glm::ivec3{ pos1.x, pos1.y, pos1.z }, seed),
            spos.x);
        iy1 = glm::mix(ix0, ix1, spos.y);
        return glm::mix(iy0, iy1, spos.z);
    }

    double value_noise_3d(glm::ivec3 const& pos, int32_t seed)
    {
        return 1.0 - (static_cast<double>(int_value_noise_3d(pos, seed)) / 1073741824.0);
    }

    int32_t int_value_noise_3d(glm::ivec3 const& pos, int32_t seed)
    {
        auto n = (glm::compAdd(NoiseGen * pos) + (SeedNoiseGen * seed)) & 0x7fffffff;
        n = (n >> 13) ^ n;
        return (n * (n * n * 60493 + 19990303) + 1376312589) & 0x7fffffff;
    }
}
